{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","count","movies","getMovies","a","console","log","moviesjson","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRA+BeA,MA3Bf,YAA0D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC3C,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,aAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SACKD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,qBAAgBL,UAAU,eAA1B,UAA2CI,EAA3C,MAASC,QAEjB,mBAAGL,UAAU,iBAAb,SAA+BH,IAC/B,oBAAGG,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAG,KAAhD,gBCgFDC,G,kNAvFbC,MAAQ,CACNC,WAAW,EACXC,MAAO,EACPC,OAAQ,I,EA8BVC,U,sBAAY,4BAAAC,EAAA,sDACVC,QAAQC,IAAI,KAENJ,EAASK,EAAWC,KAAKN,OAE/B,EAAKO,SAAU,CAACP,SAAQF,WAAU,IALxB,2C,uDAQZ,WAIEK,QAAQC,IAAI,KACZI,KAAKP,YACLE,QAAQC,IAAI,O,oBAEd,WACE,MAA6BI,KAAKX,MAA1BC,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,OACnB,OACE,yBAASX,UAAU,YAAnB,SACGS,EAAa,qBAAKT,UAAU,SAAf,SACd,sBAAMA,UAAU,cAAhB,4BAGA,qBAAKA,UAAU,SAAf,SACCW,EAAOR,KAAK,SAAAiB,GAAK,OAChB,cAAC,EAAD,CAEAC,GAAMD,EAAMC,GACZ1B,KAAQyB,EAAMzB,KACdC,MAASwB,EAAMxB,MACfC,QAAYuB,EAAMvB,QAClBC,OAAUsB,EAAME,mBAChBvB,OAAUqB,EAAMrB,QANVqB,EAAMC,e,GA7DJE,IAAMC,YCJxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.2a7cc32d.chunk.js","sourcesContent":["import React from \"react\";\nimport propTypes from \"prop-types\"\nimport \"./Movie.css\";\n\nfunction Movie({ year, title, summary, poster, genres }) {\n    return (\n        <div className=\"movie\">\n            <img src={poster} alt={title} title={title}></img>\n            <div className=\"movie_data\">\n                <h3 className=\"movie__title\">{title}</h3>\n                <h3 className=\"movie__year\">{year}</h3>\n                <ul className=\"movie__genres\">\n                    {genres.map((genre, index) =>\n                        <li key={index} className=\"genres_genre\" >{genre} </li>)}\n                </ul>\n                <p className=\"movie__summary\">{summary}</p>\n                <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\n            </div>\n        </div>\n    )\n}\n\nMovie.propTypes = {\n    id: propTypes.number.isRequired,\n    year: propTypes.number.isRequired,\n    title: propTypes.string.isRequired,\n    summary: propTypes.string.isRequired,\n    poster: propTypes.string.isRequired,\n    genres: propTypes.arrayOf(propTypes.string).isRequired\n}\n\nexport default Movie;","// import axios from \"axios\";\nimport React from \"react\";\nimport moviesjson from \"./movies.json\"\nimport Movie from \"./Movie.js\"\nimport \"./App.css\";\n// import propTypes from \"prop-types\";\n\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    count: 0,\n    movies: []\n  }\n  // add = () =>{\n  //   console.log(\"add1 : \"+this.state.count);\n  //   this.setState( current => ( {count: current.count +1})); //현재 state에 있는 최신값을 가져온 다음 더함.\n  //   //setstate는 할때마다 리랜더링을 함.\n  // }\n  // minus =() =>{\n  //   console.log(\"minus\")\n  //   this.setState( {count: this.state.count -1}); //랜더링 된 값을 가져와서 뺌\n  //   // this.setState( current => ( {count: current.count -1}));\n  // }\n\n  // constructor(pros){\n  //   super(pros)\n  //   console.log(\"constructor\");\n  // }\n  // shouldComponentUpdate(){\n  //   console.log(\"update전 : \"+this.state.count)\n  //   return true;\n  //   // setstate는 무조건 업데이트에 속해있고 setstate를 할때마다 리랜더링이 되지만, \n  //   // 이 return false값에 의해 리랜더링이 거절된다\n  // }\n\n  // componentDidMount(){\n  //   console.log(\"DidMount\");\n  // }\n  // componentDidUpdate(){\n  //   console.log(\"update후: \" + this.state.count);\n  // }\n  getMovies = async () => {\n    console.log(\"3\");\n    // const {data:{data:{moves}}} = await axios.get(\"url\");\n    const movies = moviesjson.data.movies;\n   // console.log(movies);\n    this.setState( {movies ,isLoading:false});\n\n  }\n  componentDidMount() {\n    // setTimeout(() => {\n    //   this.setState(current => ({isLoading: current.isLoading = false}))\n    // }, 2000);\n    console.log(\"1\");\n    this.getMovies();\n    console.log(\"2\");\n  }\n  render() {\n    const { isLoading ,movies} = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (<div className=\"loader\">\n        <span className=\"loader_text\"> Loading... </span>\n        </div> \n        ) : (\n        <div className=\"movies\"> \n        {movies.map( movie =>(\n          <Movie \n          key ={movie.id}\n          id = {movie.id}\n          year = {movie.year}\n          title = {movie.title}\n          summary =  {movie.summary}\n          poster = {movie.medium_cover_image}\n          genres = {movie.genres}\n          />\n        )) }\n        </div>)\n  }\n      </section>\n        \n    )\n  }\n\n  // render() {\n  //   const { isLoading } = this.state;\n  //   return (\n  //     <div>\n  //       <div>{isLoading ? \"Loading...\" : this.state.movies.map()}</div>\n  //     </div>\n  //   )\n  // }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}